# Nome da pipeline visível no GitHub Actions
name: CI - Validar, testar e fazer deploy

on:
  push:
    branches:
      - main # Dispara quando houver push na branch main
      - feat/** # Dispara quando houver push em qualquer branch que comece com feat/
  pull_request:
    branches:
      - main # Dispara quando houver pull request para main
    repository_dispatch:
      types: [contentful_update] # Dispara a pipeline via webhook Contentful
    schedule:
      # Dispara automaticamente toda segunda-feira à meia-noite
      - cron: '0 0 * * 1'

jobs:
  build:
    runs-on: ubuntu-latest # Executa job em VM Ubuntu
    env:
      # Variáveis de ambiente para Contentful
      CONTENTFUL_SPACE_ID: ${{ secrets.CONTENTFUL_SPACE_ID }}
      CONTENTFUL_ACCESS_TOKEN: ${{ secrets.CONTENTFUL_ACCESS_TOKEN }}
      CONTENTFUL_PREVIEW_ACCESS_TOKEN: ${{ secrets.CONTENTFUL_PREVIEW_ACCESS_TOKEN }}
      CONTENTFUL_PREVIEW_SECRET: ${{ secrets.CONTENTFUL_PREVIEW_SECRET }}
      CONTENTFUL_REVALIDATE_SECRET: ${{ secrets.CONTENTFUL_REVALIDATE_SECRET }}
      # Variáveis públicas que podem ser usadas no código
      NEXT_PUBLIC_CONTENTFUL_SPACE_ID: ${{ secrets.CONTENTFUL_SPACE_ID }}
      NEXT_PUBLIC_CONTENTFUL_ACCESS_TOKEN: ${{ secrets.CONTENTFUL_ACCESS_TOKEN }}
      NEXT_PUBLIC_CONTENTFUL_PREVIEW_ACCESS_TOKEN: ${{ secrets.CONTENTFUL_PREVIEW_ACCESS_TOKEN }}

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4 # Clona o repositório para a VM

      - name: Instalar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20 # Define versão do Node.js

      - name: Instalar dependências
        run: npm ci # Instala dependências de forma determinística

      # Lefthook Remoto
      # Está como comentário, uma vez que estava a dar problemas e não me permitia fazer o resto da pipeline
      #- name: Instalar Lefthook
      # run: npm install --save-dev lefthook

      # name: Rodar pre-commit Lefthook
      # run: npx lefthook run pre-commit

      - name: Verificar ESLint
        run: npx eslint . # Roda ESLint para validar código JS/TS

      - name: Verificar Prettier
        run: npx prettier --check . # Verifica se o código segue o estilo Prettier

      - name: Build do projeto
        run: npm run build # Gera o build da aplicação

      - name: Executar testes com Jest
        run: npm test -- --passWithNoTests # Roda testes, passa se não houver testes

  deploy:
    runs-on: ubuntu-latest
    needs: build # Só roda após o build ter sucesso
    if: github.ref == 'refs/heads/main' # Só faz deploy na branch main
    env:
      # Variáveis de ambiente para Netlify
      NETLIFY_SITE_ID: ${{ secrets.SITE_ID }}
      NETLIFY_AUTH_TOKEN: ${{ secrets.TOKEN_ID }}
      # Contentful secrets também no deploy (necessários se Netlify rebuildar)
      CONTENTFUL_SPACE_ID: ${{ secrets.CONTENTFUL_SPACE_ID }}
      CONTENTFUL_ACCESS_TOKEN: ${{ secrets.CONTENTFUL_ACCESS_TOKEN }}
      CONTENTFUL_PREVIEW_ACCESS_TOKEN: ${{ secrets.CONTENTFUL_PREVIEW_ACCESS_TOKEN }}
      CONTENTFUL_PREVIEW_SECRET: ${{ secrets.CONTENTFUL_PREVIEW_SECRET }}
      CONTENTFUL_REVALIDATE_SECRET: ${{ secrets.CONTENTFUL_REVALIDATE_SECRET }}

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Instalar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Instalar dependências
        run: npm ci

      - name: Deploy para Netlify
        run: npx netlify-cli deploy --site ${{ secrets.SITE_ID }} --auth ${{ secrets.TOKEN_NET }} --prod
        # Faz deploy da aplicação para Netlify em produção
